class TrieNode:
    def __init__(self):
        self.children = {}
        self.endofword = False 

class Trie:
    def __init__(self):
        self.root = TrieNode()
        
    def insert(self, word: str) -> None:
        #self.trie.append(word)
        curr = self.root
        for w in word:
            if w not in curr.children:
                curr.children[w] = TrieNode()
            curr = curr.children[w]
        curr.endofword = True
    
    def search(self, word: str) -> bool:
        curr = self.root
        for w in word:
            if w not in curr.children:
                return False
            curr = curr.children[w]
        return curr.endofword

    def startsWith(self, prefix: str) -> bool:
        curr = self.root
        for w in prefix:
            if w not in curr.children:
                return False
            curr = curr.children[w]
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)


# write some test cases
obj = Trie()
obj.insert("apple")
print(obj.search("apple")) # Expected Output: True
print(obj.search("app")) # Expected Output: False
print(obj.startsWith("app")) # Expected Output: True
obj.insert("app")
print(obj.search("app")) # Expected Output: True